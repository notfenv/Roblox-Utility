[{"title":"Attribute","type":0,"sectionRef":"#","url":"/Roblox-Utility/api/Attribute","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Attribute","url":"/Roblox-Utility/api/Attribute#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Attribute","url":"/Roblox-Utility/api/Attribute#new","content":"&lt;/&gt; Attribute.new(instance: Instance ) → Attribute Constructs an Attribute for the instance.  "},{"title":"Remove​","type":1,"pageTitle":"Attribute","url":"/Roblox-Utility/api/Attribute#Remove","content":"&lt;/&gt; Attribute:Remove(attributeName: string) → () Removes an attribute.  "},{"title":"Set​","type":1,"pageTitle":"Attribute","url":"/Roblox-Utility/api/Attribute#Set","content":"&lt;/&gt; Attribute:Set( attributeName: string, value: any ) → () Sets an attribute.  "},{"title":"Get​","type":1,"pageTitle":"Attribute","url":"/Roblox-Utility/api/Attribute#Get","content":"&lt;/&gt; Attribute:Get(attributeName: string) → any Gets an attribute. tip You can also directly reference attributes by doing Attribute.attributeName. Attribute:Set(&quot;Test&quot;, true) print(Attribute.Test) -- true caution If the instance doesn't have the attribute you are trying to find, this function will return nothing.  "},{"title":"Destroy​","type":1,"pageTitle":"Attribute","url":"/Roblox-Utility/api/Attribute#Destroy","content":"&lt;/&gt; Attribute:Destroy() → () Destroys the Attribute. "},{"title":"Stack","type":0,"sectionRef":"#","url":"/Roblox-Utility/api/Stack","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Stack","url":"/Roblox-Utility/api/Stack#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Stack","url":"/Roblox-Utility/api/Stack#new","content":"&lt;/&gt; Stack.new() → () Constructs a Stack object  "},{"title":"Push​","type":1,"pageTitle":"Stack","url":"/Roblox-Utility/api/Stack#Push","content":"&lt;/&gt; Stack:Push(value: any) → () Pushes a new value in front of the stack.  "},{"title":"Set​","type":1,"pageTitle":"Stack","url":"/Roblox-Utility/api/Stack#Set","content":"&lt;/&gt; Stack:Set( key: number, value: any ) → () Adds a new value dictated by the key.  "},{"title":"Pop​","type":1,"pageTitle":"Stack","url":"/Roblox-Utility/api/Stack#Pop","content":"&lt;/&gt; Stack:Pop() → any Finds and removes the first/highest value and returns it.  "},{"title":"IsEmpty​","type":1,"pageTitle":"Stack","url":"/Roblox-Utility/api/Stack#IsEmpty","content":"&lt;/&gt; Stack:IsEmpty() → boolean Returns if the stack's list is empty.  "},{"title":"Len​","type":1,"pageTitle":"Stack","url":"/Roblox-Utility/api/Stack#Len","content":"&lt;/&gt; Stack:Len() → number Returns how many items are in the stack. "},{"title":"RegionalUtils","type":0,"sectionRef":"#","url":"/Roblox-Utility/api/RegionalUtils","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RegionalUtils","url":"/Roblox-Utility/api/RegionalUtils#functions","content":" "},{"title":"getLocation​","type":1,"pageTitle":"RegionalUtils","url":"/Roblox-Utility/api/RegionalUtils#getLocation","content":"&lt;/&gt; RegionalUtils.getLocation( fmt: string?, safe: boolean? ) → Promise Returns the server location data. If formatting is supplied, this function will return a string instead. Will also fetch your real location info if ran in studio and safe is off or nil. Example usage from project East: RegionalUtils.getLocation(&quot;{city}, {regionName}, {countryCode}|{query}&quot;, true) :andThen(function(serverAddress: string) ReplicatedStorage:SetAttribute(&quot;Location&quot;, serverAddress) end) :catch(Output.warn)  "},{"title":"RobloxPolicy","type":0,"sectionRef":"#","url":"/Roblox-Utility/api/RobloxPolicy","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RobloxPolicy","url":"/Roblox-Utility/api/RobloxPolicy#functions","content":" "},{"title":"isEurope​","type":1,"pageTitle":"RobloxPolicy","url":"/Roblox-Utility/api/RobloxPolicy#isEurope","content":"&lt;/&gt; RobloxPolicy.isEurope(player: Player ) → Promise Checks if the player is in Europe.  "},{"title":"isSubjectToChinaPolicies​","type":1,"pageTitle":"RobloxPolicy","url":"/Roblox-Utility/api/RobloxPolicy#isSubjectToChinaPolicies","content":"&lt;/&gt; RobloxPolicy.isSubjectToChinaPolicies(player: Player ) → Promise Checks if the player is subject to China policies.  "},{"title":"isExternalLinkAllowed​","type":1,"pageTitle":"RobloxPolicy","url":"/Roblox-Utility/api/RobloxPolicy#isExternalLinkAllowed","content":"&lt;/&gt; RobloxPolicy.isExternalLinkAllowed( player: Player , link: string ) → Promise Checks if the &quot;link&quot; is allowed.  "},{"title":"isPaidItemTradingAllowed​","type":1,"pageTitle":"RobloxPolicy","url":"/Roblox-Utility/api/RobloxPolicy#isPaidItemTradingAllowed","content":"&lt;/&gt; RobloxPolicy.isPaidItemTradingAllowed(player: Player ) → Promise Checks if the player can trade paid items.  "},{"title":"arePaidRandomItemsRestricted​","type":1,"pageTitle":"RobloxPolicy","url":"/Roblox-Utility/api/RobloxPolicy#arePaidRandomItemsRestricted","content":"&lt;/&gt; RobloxPolicy.arePaidRandomItemsRestricted(player: Player ) → Promise Checks if paid random items are restricted for the player. "},{"title":"Mutex","type":0,"sectionRef":"#","url":"/Roblox-Utility/api/Mutex","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Mutex","url":"/Roblox-Utility/api/Mutex#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Mutex","url":"/Roblox-Utility/api/Mutex#new","content":"&lt;/&gt; Mutex.new() → Mutex Creates a new Mutex object.  "},{"title":"Lock​","type":1,"pageTitle":"Mutex","url":"/Roblox-Utility/api/Mutex#Lock","content":"&lt;/&gt; Mutex:Lock() → () Locks the mutex. If the mutex is already locked, the current thread will be added to the queue and suspended until the lock is released.  "},{"title":"Unlock​","type":1,"pageTitle":"Mutex","url":"/Roblox-Utility/api/Mutex#Unlock","content":"&lt;/&gt; Mutex:Unlock() → () Unlocks the mutex. If there are threads waiting in the queue, the next thread will be resumed and granted the lock. If the mutex is not locked or there are no waiting threads, an error will propagate. "},{"title":"Math","type":0,"sectionRef":"#","url":"/Roblox-Utility/api/Math","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#properties","content":" "},{"title":"epsilon​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#epsilon","content":"&lt;/&gt; Math.epsilon: number  "},{"title":"Functions​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#functions","content":" "},{"title":"frameDelta​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#frameDelta","content":"&lt;/&gt; Math.frameDelta( t: number, dt: number ) → number Calculates the frame delta given the time elapsed (t) and delta time (dt)  "},{"title":"round​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#round","content":"&lt;/&gt; Math.round( value: number, roundingValue: number ) → number Rounds a value to the nearest multiple of roundingValue  "},{"title":"smoothLerp​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#smoothLerp","content":"&lt;/&gt; Math.smoothLerp( from: number, to: number, t: number ) → number Smoothly interpolates between two numbers (from and to) using a smooth curve.  "},{"title":"slerpVector​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#slerpVector","content":"&lt;/&gt; Math.slerpVector( start: Vector3 , to: Vector3 , t: number ) → Vector3  Interpolates between two vectors (start and to) using spherical linear interpolation.  "},{"title":"safeLerp​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#safeLerp","content":"&lt;/&gt; Math.safeLerp( from: number | Color3 , to: number | Color3 , t: number ) → number | Color3  Safely interpolates between two numbers or colors (from and to) using linear interpolation.  "},{"title":"randomizeVector​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#randomizeVector","content":"&lt;/&gt; Math.randomizeVector( random: Random , to: Vector3 , t: number ) → Vector3  Randomly generates a vector based on a direction (to) and a randomizer (random).  "},{"title":"interpolateCFrame​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#interpolateCFrame","content":"&lt;/&gt; Math.interpolateCFrame( start: CFrame , to: CFrame , t: number ) → CFrame  Interpolates between two CFrame objects (start and to) using linear interpolation.  "},{"title":"lerpColor3​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#lerpColor3","content":"&lt;/&gt; Math.lerpColor3( from: Color3 , to: Color3 , t: number ) → Color3  Interpolates between two colors (from and to) using linear interpolation.  "},{"title":"lerp​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#lerp","content":"&lt;/&gt; Math.lerp( from: number, to: number, t: number ) → number Interpolates between two numbers (from and to) using linear interpolation.  "},{"title":"horizontalAngle​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#horizontalAngle","content":"&lt;/&gt; Math.horizontalAngle(dir: Vector3 ) → number Calculates the horizontal angle of a given vector (dir) in degrees.  "},{"title":"percentBetween​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#percentBetween","content":"&lt;/&gt; Math.percentBetween( min: number, max: number, oldMax: number ) → number Calculates the percentage between two values (min and max) relative to a third value (oldMax)  "},{"title":"flat​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#flat","content":"&lt;/&gt; Math.flat(vec: Vector3 ) → Vector3  Returns a copy of vec with its Y component set to 0.  "},{"title":"gamma​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#gamma","content":"&lt;/&gt; Math.gamma( value: number, absmax: number, gamma: number ) → number Applies a gamma correction to a value (value) relative to a maximum value (absmax) and a gamma value (gamma).  "},{"title":"smoothDamp​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#smoothDamp","content":"&lt;/&gt; Math.smoothDamp( current: number | Vector3 | CFrame | Vector2 , target: number | Vector3 | CFrame | Vector2 , currentVelocity: number, smoothTime: number, maxSpeed: number, deltaTime: number ) → number | Vector3 | CFrame | Vector2  Gradually changes a value towards a desired goal over time.  "},{"title":"nextPowerOfTwo​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#nextPowerOfTwo","content":"&lt;/&gt; Math.nextPowerOfTwo(value: number) → number Returns the smallest power of two that is greater than or equal to value.  "},{"title":"closestPowerOfTwo​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#closestPowerOfTwo","content":"&lt;/&gt; Math.closestPowerOfTwo(value: number) → number Returns the closest power of two to value.  "},{"title":"isPowerOfTwo​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#isPowerOfTwo","content":"&lt;/&gt; Math.isPowerOfTwo(value: number) → boolean Returns if the value is a power of two.  "},{"title":"deltaAngle​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#deltaAngle","content":"&lt;/&gt; Math.deltaAngle( current: number, target: number ) → number Calculates the shortest difference between two angles.  "},{"title":"pingPong​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#pingPong","content":"&lt;/&gt; Math.pingPong( t: number, length: number ) → number PingPongs the value t, so that it is never larger than length and never smaller than 0.  "},{"title":"inverseLerp​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#inverseLerp","content":"&lt;/&gt; Math.inverseLerp( a: number, b: number, value: number ) → number Calculates the inverse interpolation of two values.  "},{"title":"smoothDampAngle​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#smoothDampAngle","content":"&lt;/&gt; Math.smoothDampAngle( current: number, target: number, currentVelocity: number, smoothTime: number, maxSpeed: number?, deltaTime: number? ) → number Smoothly changes an angle in degrees towards a desired angle over time. Returns the new angle after the change.  "},{"title":"approximately​","type":1,"pageTitle":"Math","url":"/Roblox-Utility/api/Math#approximately","content":"&lt;/&gt; Math.approximately( a: number, b: number ) → boolean Compares two floating point values if they are similar If a or b is zero, compare that the other is less or equal to epsilon. If neither a or b are 0, then find an epsilon that is good for comparing numbers at the maximum magnitude of a and b. Floating points have about 7 significant digits, so 1.000001 can be represented while 1.0000001 is rounded to zero, thus we could use an epsilon of 0.000001 for comparing values close to 1. We multiply this epsilon by the biggest magnitude of a and b.. "},{"title":"Weight","type":0,"sectionRef":"#","url":"/Roblox-Utility/api/Weight","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Weight","url":"/Roblox-Utility/api/Weight#functions","content":" "},{"title":"choose​","type":1,"pageTitle":"Weight","url":"/Roblox-Utility/api/Weight#choose","content":"&lt;/&gt; Weight:choose() → any Chooses an item in the Weight. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Roblox-Utility/docs/intro","content":"","keywords":""},{"title":"Wally Configuration​","type":1,"pageTitle":"Getting Started","url":"/Roblox-Utility/docs/intro#wally-configuration","content":"Once Wally is installed, run wally init on your project directory, and then add the various utility modules found here as dependencies. For example, the following could be a wally.toml file for a project that includes a few of these modules: [package] name = &quot;your_name/your_project&quot; version = &quot;0.1.0&quot; registry = &quot;https://github.com/UpliftGames/wally-index&quot; realm = &quot;shared&quot; [dependencies] Attribute = &quot;notfenv/attribute@^1&quot;  To install these dependencies, run wally install within your project. Wally will create a Package folder in your directory with the installed dependencies. "},{"title":"Rojo Configuration​","type":1,"pageTitle":"Getting Started","url":"/Roblox-Utility/docs/intro#rojo-configuration","content":"The Package folder created by Wally should be synced into Roblox Studio through your Rojo configuration. For instance, a Rojo configuration might have the following entry to sync the Packages folder into ReplicatedStorage: { &quot;name&quot;: &quot;rbx-util-example&quot;, &quot;tree&quot;: { &quot;$className&quot;: &quot;DataModel&quot;, &quot;ReplicatedStorage&quot;: { &quot;$className&quot;: &quot;ReplicatedStorage&quot;, &quot;Packages&quot;: { &quot;$path&quot;: &quot;Packages&quot; } } } }  "},{"title":"Usage Example​","type":1,"pageTitle":"Getting Started","url":"/Roblox-Utility/docs/intro#usage-example","content":"The installed dependencies can now be used in scripts, such as the following: -- Reference folder with packages: local Packages = game:GetService(&quot;ReplicatedStorage&quot;).Packages -- Require the utility modules: local Attribute = require(Packages.Attribute) -- Use the modules: local attribute = Attribute.new(object) attribute.AttributeChanged:Connect(function(name, value) print(name, value) end) attribute:Set(&quot;Test&quot;, true)  "},{"title":"Welder","type":0,"sectionRef":"#","url":"/Roblox-Utility/api/Welder","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Welder","url":"/Roblox-Utility/api/Welder#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Welder","url":"/Roblox-Utility/api/Welder#new","content":"&lt;/&gt; Welder.new( container: Model? , root: BasePart? ) → Welder Constructs a Welder, used for welding instances to a root instance.  "},{"title":"Bind​","type":1,"pageTitle":"Welder","url":"/Roblox-Utility/api/Welder#Bind","content":"&lt;/&gt; Welder:Bind( container: Model , weldTo: BasePart ) → () Prepares the container for welding to weldTo. caution Run this before calling `Welder:Apply()  "},{"title":"Apply​","type":1,"pageTitle":"Welder","url":"/Roblox-Utility/api/Welder#Apply","content":"&lt;/&gt; Welder:Apply(applyAsMotor: boolean | false) → () Welds the model to the primary part, using a Motor6D if applyAsMotor is true. local welder = Welder.new() welder:Bind(tool, tool.Handle) welder:Apply(true) -- All joints will be a Motor6D   "},{"title":"Break​","type":1,"pageTitle":"Welder","url":"/Roblox-Utility/api/Welder#Break","content":"&lt;/&gt; Welder:Break() → () Destroys the welds.  "},{"title":"Destroy​","type":1,"pageTitle":"Welder","url":"/Roblox-Utility/api/Welder#Destroy","content":"&lt;/&gt; Welder:Destroy(breakJoints: boolean | false) → () Destroys the Welder, and breaking the joints if breakJoints is true. "}]