"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[530],{77593:t=>{t.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs an Attribute for the `instance`.","params":[{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"Attribute"}],"function_type":"static","source":{"line":94,"path":"src/Attribute/init.lua"}},{"name":"Remove","desc":"Removes an attribute.","params":[{"name":"attributeName","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":124,"path":"src/Attribute/init.lua"}},{"name":"Set","desc":"Sets an attribute.","params":[{"name":"attributeName","desc":"","lua_type":"string"},{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":134,"path":"src/Attribute/init.lua"}},{"name":"Get","desc":"Gets an attribute.\\n\\n:::tip\\nYou can also directly reference attributes by doing `Attribute.attributeName`.\\n```lua\\nAttribute:Set(\\"Test\\", true)\\nprint(Attribute.Test) -- true\\n```\\n:::\\n\\n:::caution\\nIf the instance doesn\'t have the attribute you are trying to find, this function will return nothing.\\n:::","params":[{"name":"attributeName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","source":{"line":164,"path":"src/Attribute/init.lua"}},{"name":"Destroy","desc":"Destroys the Attribute.","params":[],"returns":[],"function_type":"method","source":{"line":172,"path":"src/Attribute/init.lua"}}],"properties":[],"types":[],"name":"Attribute","desc":"Attribute library.\\n\\nThis is useful for tracking and updating attributes of an instance without the absurdly long `:GetAttribute` and `:SetAttribute` functions.\\nAn example Attribute may look like this:\\n```lua\\nlocal Attribute = require(path.to.attribute)\\nlocal Part = Instance.new(\\"Part\\")\\nlocal PartAttribute = Attribute.new(Part)\\n\\n-- Setting an attribute:\\nPartAttribute:Set(\\"Name\\", 1234)\\n\\n-- Getting an attribute via method:\\nlocal attribute = PartAttribute:Get(\\"Name\\")\\n\\n-- Getting an attribute via reference:\\nlocal attribute = PartAttribute.Name\\n\\n-- Listening for attribute changes:\\nPartAttribute.AttributeChanged:Connect(function(attribute, value)\\n    print(attribute, value)\\nend)\\n\\n-- Removing an attribute:\\nPartAttribute:Remove(\\"Name\\")\\n\\nprint(PartAttribute:Get(\\"Name\\")) -- nil\\nprint(PartAttribute.Name) -- nil\\n\\n-- Destroying the Attribute:\\nPartAttribute:Destroy()\\n\\n-- Do note that if the instance is destroyed, the Attribute will also destroy.\\n```","source":{"line":77,"path":"src/Attribute/init.lua"}}')}}]);